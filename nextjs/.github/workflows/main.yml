name: 'Build and deploy a standalone Next.js application to Azure App Service'
on:
  push:
    branches:
      # - main
      - none
  workflow_dispatch:

env:
  none: none
  # Create three repository secrets in Settings > Security > Secrets and variables > Actions
  # - AZURE_APP_SERVICE_NAME
  #   - Save [your-app-service-name] value just like in https://[your-app-service-name].azurewebsites.net
  # - AZURE_APP_SERVICE_PUBLISH_PROFILE
  #   - Download ProfileSettings.xml from your Azure App Service > Overview. 
  #   - Save entire XML content into AZURE_APP_SERVICE_PUBLISH_PROFILE
  # - ENV_FILE_CONTENT
  #   - Optional content of your .env file (if required)

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # Adjust according to your Node.js version

      - name: 'npm install and build'
        # Makes static resources available in a standalone build.
        # Here you can provide empty entries in .env file using a copy of .env.example.
        # This gives you a way to load actual values from Environment settings of your Azure Spp Service
        # - to avoid "undefined" entries generated by Next compiler by default
        # cp ${{github.workspace}}/.env.example ${{github.workspace}}/.env
        #
        # And, this is a straight way. All your environmental settings come "as is" from your ENV_FILE_CONTENT file content.
        run: |
          echo '${{secrets.ENV_FILE_CONTENT}}' > ${{github.workspace}}/.env
          npm install
          npm run plain
          cp -r -f .next/static .next/standalone/.next/static
        # I used 'npm run plain' config to make specific additional actions in my builds. You can use default 'npm run build' instead.
        # - Remember to update next.config.mjs and add const nextConfig = { output: "standalone",... there.
        # - At the state on Aug 2024, deployment of Next.js app to Azure App Service requires a standalone build.
        #
        # You can add any extra actions, for instance, to copy public, deploy certificates, etc.
        # cp -r -f ${{github.workspace}}/public .next/standalone/public       
        # mkdir .next/standalone/certs
        # cp -r -f ${{github.workspace}}/certs/*.pfx .next/standalone/certs
        # echo ${{github.workspace}}
        # echo $GITHUB_WORKSPACE

      - name: 'Deploy to Azure App Service'
        #id: deploy-to-app-service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{secrets.AZURE_APP_SERVICE_NAME}}
          publish-profile: ${{secrets.AZURE_APP_SERVICE_PUBLISH_PROFILE}}
          package: .next
          # slot-name: "Production"
